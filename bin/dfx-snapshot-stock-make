#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

print_help() {
  cat <<-EOF

	Creates a snapshot of a stock environment, for use in CI tests.
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=s long=snapshot desc="The file to save to" variable=DFX_SNAPSHOT_FILE default="stock-snsdemo-snapshot.tar.xz"
clap.define short=c long=ic_commit desc="The IC commit to use" variable=DFX_IC_COMMIT default="$(dfx-software ic current)"
clap.define short=x long=ic_dir desc="Directory containing the ic source code; needed for deployments to static testnets" variable=IC_REPO_DIR default="$HOME/dfn/ic"
clap.define long=parallel_sns_count desc="Number of additional SNSes to create in parallel after dfx-sns-demo finishes" variable=PARALLEL_SNS_COUNT default="10"
clap.define long=unique_logo desc="A flag to use an config-index-based pseudo-unique logo instead of the default logo." variable=UNIQUE_LOGO default=false
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

if pgrep -x replica; then
  echo "❌ A replica is already running. Stop it before creating a snapshot."
  exit 1
fi

onSetupFailure() {
  # Stop the replica because otherwise it continues outputting logs, obscuring
  # the fact that the script has finished and making the error message hard to
  # find.
  dfx-network-stop
  echo "❌ Something went wrong. Failed to create snapshot."
  exit 1
}

trap onSetupFailure EXIT

: "Make sure the snapshot is used with the same version of dfx that created it."
dfxvm default "$(jq -r .dfx dfx.json)"

: Create stock state
dfx-stock-deploy --ic_commit "$DFX_IC_COMMIT" --ic_dir "$IC_REPO_DIR" --parallel_sns_count "$PARALLEL_SNS_COUNT" --unique_logo "$UNIQUE_LOGO"

: "Stop the replica gently but forcefully.  It must be stopped and should ideally have a clean state."
dfx-network-stop

: "We made it. Remove the trap."
trap '' EXIT

echo "Saving state"
dfx-snapshot-save --snapshot "$DFX_SNAPSHOT_FILE"

echo "Snapshot saved to $DFX_SNAPSHOT_FILE"
