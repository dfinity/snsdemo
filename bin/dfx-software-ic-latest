#!/usr/bin/env bash
set -eu # No pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=x long=ic_dir desc="Directory containing the ic source code" variable=IC_REPO_DIR default="$HOME/dfn/ic"
clap.define short=b long=before desc="Latest published commit before the given one" variable=IC_COMMIT_BEFORE default=""
clap.define short=a long=after desc="First published commit after the given one" variable=IC_COMMIT_AFTER default=""
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

function downloads_exist() {
  (
    set -euo pipefail

    for file in \
      "binaries/x86_64-darwin/ic-admin.gz" \
      "binaries/x86_64-darwin/sns.gz" \
      "binaries/x86_64-linux/ic-admin.gz" \
      "binaries/x86_64-linux/sns.gz" \
      "canisters/bitcoin-mock-canister.wasm.gz" \
      "canisters/ic-ckbtc-kyt.wasm.gz" \
      "canisters/ic-ckbtc-minter.wasm.gz" \
      "canisters/ic-icrc1-index-ng-u256.wasm.gz" \
      "canisters/ic-icrc1-index-ng.wasm.gz" \
      "canisters/ic-icrc1-ledger-u256.wasm.gz" \
      "canisters/ic-icrc1-ledger.wasm.gz" \
      "canisters/sns-wasm-canister.wasm.gz"; do

      curl --location --output /dev/null --silent --head --fail \
        "https://download.dfinity.systems/ic/${GIT_REVISION}/$file" || exit 1
    done

    # Syncing to the public repo may be slow
    curl -fL --output /dev/null --silent --head --fail \
      "https://raw.githubusercontent.com/dfinity/ic/${GIT_REVISION}/rs/nns/dfx.json" || exit 1
  )
}

if ! [ -d "$IC_REPO_DIR" ]; then
  echo "IC repo directory '$IC_REPO_DIR' does not exist" >&2
  exit 1
fi

cd "$IC_REPO_DIR"

if [[ "$(git rev-parse --is-inside-work-tree)" != "true" ]]; then
  echo "IC repo directory '$IC_REPO_DIR' is not a git repository" >&2
  exit 1
fi

(
  git      fetch
  if test -n "${IC_COMMIT_BEFORE:-}"; then
    IC_COMMIT="$(git log --pretty=%P -n 1 "$IC_COMMIT_BEFORE" | awk '{print $(NF)}')"
  elif test -n "${IC_COMMIT_AFTER:-}"; then
    IC_COMMIT="$IC_COMMIT_AFTER"
  else
    IC_COMMIT="$(git rev-parse origin/master)"
  fi
  if test -n "${IC_COMMIT_AFTER:-}"; then
    git log --format=format:%H --reverse "${IC_COMMIT}...origin/master" | sed 1d
  else
    git log --format=format:%H "$IC_COMMIT"
  fi
) | while read -r GIT_REVISION; do downloads_exist && echo "$GIT_REVISION" && break; done
