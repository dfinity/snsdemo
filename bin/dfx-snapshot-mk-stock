#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

print_help() {
  cat <<-EOF

	Creates a snapshot of a stock environment, for use in CI tests.
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=s long=snapshot desc="The file to save to" variable=DFX_SNAPSHOT_FILE default="stock-snsdemo-snapshot.tar.xz"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

: Set up SNS state and create one finalized SNS
bin/dfx-sns-demo

: "Wait for a snapshot"
case "$(uname)" in
Darwin) SHARE_DIR="$HOME/Library/Application Support/org.dfinity.dfx" ;;
*) SHARE_DIR="$HOME/Library/Application Support/org.dfinity.dfx" ;;
esac
test -d "$SHARE_DIR" || {
  echo "ERROR: Share dir does not exist at: '$CHECKPOINT_DIR'"
  exit 1
} >&2
tree "$SHARE_DIR/network/local"
REPLICA_CONFIG="${SHARE_DIR}/network/local/state/replicated_state/ic.json5"
CHECKPOINT_DIR="$(jq -r .state_manager.state_root "$REPLICA_CONFIG")/checkpoints"
test -d "$CHECKPOINT_DIR" || {
  echo "ERROR: Checkpoint dir does not exist at: '$CHECKPOINT_DIR'"
  exit 1
} >&2
snapshots_now="$(ls "$SNAPSHOT_DIR")"
for ((i = 300; i > 0; i++)); do
  snapshots_later="$(ls "$SNAPSHOT_DIR" || true)"
  [[ "${snapshots_now:-}" == "$snapshots_later" ]] || break
  printf '\rTries: % 4d' "$i" # Line is rewritten in an interactive terminal.  \r == carriage return == move the typewriter to the start of the current line.  Except on Mac.
  sleep 5
done
printf '\n' # \n == newline == advance the paper in the typewriter.  Finishes the countdown.
echo "Snapshot change (if any):"
diff <(echo "${snapshots_now:-}") <(echo "${snapshots_later:-}") && echo "No change" || true
sleep 5 # Make sure the snapshot is fully populated.  I don't know how to check for this.  It _may_ be atomic.

: Stop the replica to let it persist all its state before we save the state.
dfx stop

echo "Waiting for replica to stop"
for ((i = 100; i > 0; i--)); do
  printf '\r % 4d' "$i"
  pgrep replica || break
  sleep 1
done
echo

echo "Making sure the replica is dead"
dfx-network-stop
sleep 1
echo "Saving state"
dfx-snapshot-save --verbose --snapshot "$DFX_SNAPSHOT_FILE"
