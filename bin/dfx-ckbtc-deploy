#!/usr/bin/env bash
# Original source: https://github.com/dfinity/ckBTC-Minter-Frontend/blob/master/local_deploy.sh
# Via:             https://github.com/dfinity/nns-dapp/blob/main/scripts/ckbtc/deploy-ckbtc
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"
. "$SOURCE_DIR/versions.bash"

print_help() {
  cat <<-EOF

	Installs ckbtc canisters.

	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
clap.define short=p long=prefix desc="Prefix for the local canister names" variable=LOCAL_PREFIX default="ckbtc_"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

"${SOURCE_DIR}/dfx-ckbtc-import" --check --prefix "$LOCAL_PREFIX" || {
  echo "ERROR: ckbtc canister data and files are not all present and correct."
  echo "       Please run:"
  echo "       dfx-ckbtc-import --prefix '$LOCAL_PREFIX'"
  echo
  exit 1
} >&2

dfx canister create "${LOCAL_PREFIX}ledger" --network "$DFX_NETWORK"
dfx canister create "${LOCAL_PREFIX}minter" --network "$DFX_NETWORK"

MINTERID="$(dfx canister id "${LOCAL_PREFIX}minter" --network "$DFX_NETWORK")"
echo "$MINTERID"
LEDGERID="$(dfx canister id "${LOCAL_PREFIX}ledger" --network "$DFX_NETWORK")"
echo "$LEDGERID"

# echo "Step 2: deploying minter canister..."
dfx deploy "${LOCAL}minter" --network "$DFX_NETWORK" --argument "(variant {
  Init = record {
       btc_network = variant { Regtest };
       ledger_id = principal \"$LEDGERID\";
       ecdsa_key_name = \"dfx_test_key\";
       retrieve_btc_min_amount = 0;
       max_time_in_queue_nanos = 420_000_000_000;
       min_confirmations = opt 12;
       mode = variant { GeneralAvailability };
       kyt_fee = opt 13_333;
       kyt_principal = null;
   }
})" --mode=reinstall

echo "Step 3: deploying ledger canister..."
PRINCIPAL="$(dfx identity get-principal)"
dfx deploy "${LOCAL}ledger" --network "$DFX_NETWORK" --argument "(variant {
  Init = record {
     token_symbol = \"ckBTC\";
     token_name = \"Token ckBTC\";
     minting_account = record { owner = principal \"$MINTERID\" };
     transfer_fee = 11_500;
     metadata = vec {};
     initial_balances = vec { record { record { owner = principal \"$PRINCIPAL\"; }; 10_000_000; }; };
     archive_options = record {
         num_blocks_to_archive = 10_000;
         trigger_threshold = 20_000;
         controller_id = principal \"$PRINCIPAL\";
         cycles_for_archive_creation = opt 4_000_000_000_000;
     };
 }
})" --mode=reinstall

echo "Step 4: deploying index canister..."
dfx deploy "${LOCAL}index" --network "$DFX_NETWORK" --argument "(record { ledger_id = principal \"$LEDGERID\" })" --mode=reinstall

# Example to mint ckBTC

# BTCADDRESS="$(dfx canister call "${LOCAL}minter" get_btc_address '(record {subaccount=null;})')"
# dfx canister call "${LOCAL}minter" update_balance '(record {subaccount=null;})'
# WITHDRAWALADDRESS="$(dfx canister call "${LOCAL}minter" get_withdrawal_account)"
# echo $BTCADDRESS
# echo $WITHDRAWALADDRESS
#
# cleaned_output=$(echo $WITHDRAWALADDRESS | sed -re 's/^\(|, \)$//g')
#
# dfx canister call "${LOCAL}ledger" icrc1_transfer "(record {from=null; to=$cleaned_output; amount=1000000; fee=null; memo=null; created_at_time=null;})"
#
# Execute the command to get the input string and save the result
# dfx canister call "${LOCAL}minter" retrieve_btc '(record {fee = null; address="bcrt1qu9za0uzzd3kjjecgv7waqq0ynn8dl8l538q0xl"; amount=10000})'

echo "Step 5: transfer ckBTC to principal..."
# record { owner= principal “”;}
dfx canister call "${LOCAL}ledger" --network "$DFX_NETWORK" icrc1_transfer "(record {from=null; to=record { owner= principal \"73avq-yvrvj-kuzxq-kttlj-nkaz4-tecy6-biuud-3ymeg-guvci-naire-uqe\";}; amount=1000000; fee=null; memo=null; created_at_time=null;})"
