#!/usr/bin/env bash
# shellcheck disable=SC2317 # Package check & install functions are called indirectly.
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"
. "$SOURCE_DIR/versions.bash"

print_help() {
  cat <<-EOF

	Helps you install the tools needed to work with the farm.

	Note: Dev servers usually have these installed already.
	Warning: These are just the tools I needed to install, there may be more.
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
clap.define short=c long=ic_commit desc="The IC commit of the wasms" variable=DFX_IC_COMMIT default="$DFX_IC_COMMIT"
clap.define short=x long=ic_dir desc="Directory containing the ic source code" variable=IC_REPO_DIR default="$HOME/dfn/ic"
clap.define short=y long=nd_dir desc="Directory containing the nns-dapp source code" variable=ND_REPO_DIR default="$HOME/dfn/nns-dapp"
clap.define short=i long=identity desc="The dfx identity to use" variable=DFX_IDENTITY default="$(dfx identity whoami)"
clap.define short=b long=bin desc="Local directory for executables" variable=USER_BIN default="$HOME/.local/bin"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

export DFX_NETWORK

DEPENDENCIES=(podman zstd libunwind make_ext4fs)
OS="$(uname)"

apt_install() {
  [[ "${APT_IS_UPDATED:-}" == "true" ]] || {
    sudo apt-get update
    APT_IS_UPDATED=true
  }
  sudo apt-get install -yy "${@}"
}

check_podman() {
  command -v podman
}
install_podman() {
  cat <<-EOF
	Please install podman as described here:
	- Ubuntu 20.04: https://www.atlantic.net/dedicated-server-hosting/how-to-install-and-use-podman-on-ubuntu-20-04/
	- Other: https://podman.io/getting-started/installation

	EOF
  read -pr "Please press enter when you have finished installing podman."
}
check_zstd() {
  command -v zstd
}
install_zstd() {
  case "$OS" in
  Linux) apt_install zstd ;;
  *)
    echo "Unsupported OS.  Please add instructions."
    exit 1
    ;;
  esac
}
check_libunwind() {
  dpkg-query --show libunwind-dev
}
install_zstd() {
  case "$OS" in
  Linux) apt_install libunwind-dev ;;
  *)
    echo "Unsupported OS.  Please add instructions."
    exit 1
    ;;
  esac
}
check_make_ext4fs() {
  command -v make_ext4fs
}
install_make_ext4fs() {
  # Note: I'm not sure why we use this instead of mkfs.ext4, which is fairly universally available on Linux.
  apt_install android-sdk-ext4-utils
}

for dependency in "${DEPENDENCIES[@]}"; do
  "check_${dependency}" || {
    "install_${dependency}" && "check_${dependency}"
  }
done
echo Installed all dependencies
