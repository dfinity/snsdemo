#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
DEMO_BIN="$(realpath "${SOURCE_DIR}/..")/bin-other"
PATH="$SOURCE_DIR:$DEMO_BIN:$HOME/.local/bin:$PATH"
export PATH

print_help() {
  cat <<-EOF

	Deploys a stock set of canisters and state:
	 - NNS canisters including root, governance, ledger and others.
	 - SNS canisters and applies the configuration required to make additional canisters.
	 - CKBTC canisters (incomplete)
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
clap.define short=c long=ic_commit desc="The IC commit to use" variable=DFX_IC_COMMIT default="$(dfx-software ic current)"
clap.define short=x long=ic_dir desc="Directory containing the ic source code; needed for deployments to static testnets" variable=IC_REPO_DIR default="$HOME/dfn/ic"
clap.define short=y long=nd_dir desc="Directory containing the nns-dapp source code; needed for deployments to static testnets" variable=ND_REPO_DIR default="$HOME/dfn/nns-dapp"
clap.define long=parallel_sns_count desc="Number of additional SNSes to create in parallel after dfx-sns-demo finishes" variable=PARALLEL_SNS_COUNT default="10"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"
set -x
cd "$(dirname "$(realpath "$0")")/.."

if [[ "${DFX_IC_COMMIT:-}" == "latest" ]]; then
  DFX_IC_COMMIT="$(dfx-software ic latest --ic_dir "$IC_REPO_DIR")"
fi

: Set up SNS state and create one finalized SNS
dfx-sns-demo --network "$DFX_NETWORK" --ic_commit "$DFX_IC_COMMIT" --ic_dir "$IC_REPO_DIR" --nd_dir "$ND_REPO_DIR"

dfx-software-mock-bitcoin-install --network "$DFX_NETWORK" --ic_commit "$DFX_IC_COMMIT"

: Add 1 open SNS project.
dfx-sns-demo-mksns --network "$DFX_NETWORK" --confirmation_text "I confirm the confirmation text" --index 1

: Add some more finalized SNS projects.
if [ "${PARALLEL_SNS_COUNT:-0}" -gt 0 ]; then
  dfx-sns-demo-mksns-parallel --network "$DFX_NETWORK" --num_sns "$PARALLEL_SNS_COUNT" --majority snsdemo8 --index-offset 2
fi

: Set up ckbtc canisters
dfx-ckbtc-import --prefix ckbtc_
dfx-ckbtc-deploy --prefix ckbtc_ --network "$DFX_NETWORK" --yes

: Set up cketh canisters
dfx-token-import --prefix cketh_ --commit "$DFX_IC_COMMIT"
dfx-token-deploy \
  --prefix cketh_ \
  --token ckETH \
  --decimals 18 \
  --fee 2_000_000_000_000 \
  --network "$DFX_NETWORK" \
  --yes

: Set up ckUSDC canisters
dfx-token-import --prefix ckusdc_ --commit "$DFX_IC_COMMIT"
dfx-token-deploy \
  --prefix ckusdc_ \
  --token ckUSDC \
  --decimals 6 \
  --fee 4000 \
  --logo-svg-file "$SOURCE_DIR/../ckUSDC-logo.svg" \
  --network "$DFX_NETWORK" \
  --yes

: Mint 10M ckETH into the faucet addresses.
# See https://github.com/dfinity/nns-dapp/blob/main/frontend/src/lib/api/dev.api.ts
FAUCET_ADDRESS="jg6qm-uw64t-m6ppo-oluwn-ogr5j-dc5pm-lgy2p-eh6px-hebcd-5v73i-nqe"
# The current identity was set as minting account and minting is done by
# transferring from the minting account.
dfx canister call cketh_ledger icrc1_transfer "(record {to=record{owner=principal \"$FAUCET_ADDRESS\"}; amount=10_000_000_000_000_000_000_000_000:nat})"
dfx canister call ckusdc_ledger icrc1_transfer "(record {to=record{owner=principal \"$FAUCET_ADDRESS\"}; amount=10_000_000_000_000:nat})"

: Add the nns root as a controller to the frontend canisters
NNS_ROOT="$(dfx canister id nns-root --network "$DFX_NETWORK")"
for canister in nns-dapp internet_identity; do
  dfx canister --network "$DFX_NETWORK" update-settings "$canister" --add-controller "$NNS_ROOT"
done
