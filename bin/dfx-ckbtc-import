#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"
. "$SOURCE_DIR/versions.bash"

print_help() {
  cat <<-EOF

	Adds ckbtc canisters to the local dfx.json and populates the corresponding wasm and did files.

	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=c long=commit desc="Commit of the IC repo to download canisters from" variable=IC_COMMIT default="3b1e62d3dcfa0e2e7364e4578482e0d15fb0201b"
clap.define short=p long=prefix desc="Prefix for the local canister names" variable=LOCAL_PREFIX default="ckbtc_"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

# These match `dfx nns import`:
WASM_DIR="wasms"
CANDID_DIR="candid"

test -e dfx.json || {
  echo "ERROR: No dfx.json found.  Please run this from inside a dfx project."
  exit 1
} >&2

mkdir -p "$WASM_DIR"
mkdir -p "$CANDID_DIR"

: Get the wasms
get_wasm() {
  local remote_name="$1"
  local local_name="$2"
  if test -e "$local_name"; then
    echo "Skipping $local_name as it already exists"
  else
    local url="https://download.dfinity.systems/ic/$IC_COMMIT/canisters/${remote_name}.gz"
    echo "Getting  $local_name from $url..."
    curl -sSL "$url" -o "${local_name}.gz"
    gunzip "${local_name}.gz"
  fi
}
pushd "$WASM_DIR"
get_wasm ic-ckbtc-minter.wasm "${LOCAL_PREFIX}minter.wasm"
get_wasm ic-icrc1-ledger.wasm "${LOCAL_PREFIX}ckbtc_ledger.wasm"
get_wasm ic-icrc1-index.wasm "${LOCAL_PREFIX}ckbtc_index.wasm"
popd

: Get the candid files
get_did() {
  local remote_name="$1"
  local local_name="$2"
  if test -e "$local_name"; then
    echo "Skipping $local_name as it already exists"
  else
    local url="https://raw.githubusercontent.com/dfinity/ic/$IC_COMMIT/${remote_name}"
    echo "Getting  $local_name from $url..."
    curl -sSLf --retry 5 "$url" -o "$local_name"
  fi
}
pushd "$CANDID_DIR"
get_did rs/bitcoin/ckbtc/minter/ckbtc_minter.did ckbtc_minter.did
get_did rs/rosetta-api/icrc1/ledger/icrc1.did ckbtc_ledger.did
get_did rs/rosetta-api/icrc1/index/index.did ckbtc_index.did
popd

: Update dfx.json
jq -s '.[0] * .[1]' dfx.json "${SOURCE_DIR}/dfx-ckbtc-dfx.json" | sponge dfx.json

: Verify that all filea re present and correct
for canister in minter ledger index ; do
	canister_config="$(n="$LOCAL_PREFIX$canister" jq '.canisters[env.n]' dfx.json)"
	[[ "$canister_config" != "null" ]] || {
	    printf "ERROR: %s\n" "$LOCAL_PREFIX$canister should be in dfx.json"
	    exit 1
	} 2>&1
        canister_wasm_path="$(printf "%s" "$canister_config" | jq .wasm)"
	[[ "$canister_wasm_path" != "null" ]] || {
	    printf "ERROR: %s\n" "$LOCAL_PREFIX$canister config in dfx.json should include \"wasm\": <PATH TO WASM>"
	    exit 1
	} >&2
        test -e "$canister_wasm_path" || {
	    printf "ERROR: %s\n" "Wasm for $LOCAL_PREFIX$canister for found at the path given in dfx.json: '$canister_wasm_path'"
	    exit 1
	} >&2
        canister_did_path="$(printf "%s" "$canister_config" | jq .candid)"
	[[ "$canister_did_path" != "null" ]] || {
	    printf "ERROR: %s\n" "$LOCAL_PREFIX$canister config in dfx.json should include \"candid\": <PATH TO .did FILE>"
	    exit 1
	} >&2
        test -e "$canister_did_path" || {
	    printf "ERROR: %s\n" "Candid for $LOCAL_PREFIX$canister for found at the path given in dfx.json: '$canister_did_path'"
	    exit 1
	} >&2
        if command -v idl2json
	then idl2json < "$canister_did_path" >/dev/null || {
	    printf "ERROR: %s\n" "Candid for $LOCAL_PREFIX$canister at '$canister_did_path' is not a valid did file."
	    exit 1
	} >&2
	fi
done
