#!/usr/bin/env bash
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# Source the optparse.bash file ---------------------------------------------------
source "$SOURCE_DIR/optparse.bash"
# Define options
optparse.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
optparse.define short=c long=config desc="The SNS cofiguration" variable=SNS_CONFIG default="sns.yml"
# Source the output file ----------------------------------------------------------
source "$(optparse.build)"
set -euo pipefail
PATH="$PATH:$(dfx cache show)"
export PATH

export DFX_NETWORK

{ # Verifies that the canister ID and did file are known before deploying.
  dfx canister id nns-sns-wasm --network "$DFX_NETWORK" &&
    dfx-canister-did-dump nns-sns-wasm
} >/dev/null 2>/dev/null || {
  echo "Canister nns-sns-wasm is not defined."
  echo "Please run:"
  echo "    dfx nns import --network-mapping $DFX_NETWORK=local"
  exit 1
} >&2
SNS_TOKEN_SYMBOL="$(awk '/^token_symbol:/{print $2}' "$SNS_CONFIG")"
SNS_CANISTER_IDS_FILE="sns_${SNS_TOKEN_SYMBOL}_canister_ids.json"
rm -f "$SNS_CANISTER_IDS_FILE"
set "sns" deploy --network "$DFX_NETWORK" --init-config-file "$SNS_CONFIG" --save-to "$SNS_CANISTER_IDS_FILE"
echo "${@}"
"${@}" | tee ,sns-init-response.idl
jq -e 'to_entries | {canisters: map({key: .key, value: {remote: {id: .value}}}) | from_entries}' "$SNS_CANISTER_IDS_FILE" | jq -se '.[1] * .[0]' - dfx.json | sponge dfx.json
