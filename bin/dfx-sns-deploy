#!/usr/bin/env bash
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# Source the optparse.bash file ---------------------------------------------------
source "$SOURCE_DIR/optparse.bash"
# Define options
optparse.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
optparse.define short=c long=config desc="The SNS cofiguration" variable=SNS_CONFIG default="sns.yml"
# Source the output file ----------------------------------------------------------
source "$(optparse.build)"
set -euo pipefail
PATH="$PATH:$(dfx cache show)"
export PATH

export DFX_NETWORK

{ # Verifies that the canister ID and did file are known before deploying.
  dfx canister id nns-sns-wasm --network "$DFX_NETWORK" &&
    dfx-canister-did-dump nns-sns-wasm
} >/dev/null 2>/dev/null || {
  echo "Canister nns-sns-wasm is not defined."
  echo "Please run:"
  echo "    dfx nns import --network-mapping $DFX_NETWORK=local"
  exit 1
} >&2
set "sns" deploy --network "$DFX_NETWORK" --init-config-file "$SNS_CONFIG"
echo "${@}"
"${@}" | tee ,sns-init-response.idl

if [[ "$DFX_NETWORK" == "local" ]]; then
  perl -e 'while($_ = <>){if (s/^\(/(/){ $p=1 } ; if ($p == 1){print $_}}' <,sns-init-response.idl |
    idl2json |
    jq '.canisters[] | to_entries | map({ ("sns_"+.key): {remote: {id:{(env.DFX_NETWORK): (.value[0])}}}}) | add | {canisters: .}' |
    jq -s '.[1] * .[0]' - dfx.json | sponge dfx.json
else
  test -e canister_ids.json || {
    echo "{}" >canister_ids.json
  }

  perl -e 'while($_ = <>){if (s/^\(/(/){ $p=1 } ; if ($p == 1){print $_}}' <,sns-init-response.idl |
    idl2json |
    jq '.canisters[] | to_entries | map({ ("sns_"+.key): {(env.DFX_NETWORK): (.value[0])} }) | add' |
    jq -s '.[1] * .[0]' - canister_ids.json | sponge canister_ids.json
fi
