#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"
. "$SOURCE_DIR/versions.bash"

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=I long=icp desc="The amount of ICP to swap" variable=AMOUNT default="max"
clap.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
clap.define short=i long=identity desc="The dfx identity to use" variable=DFX_IDENTITY default="$(dfx identity whoami)"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

export DFX_NETWORK

# The swap must be open before we can buy in.
dfx-sns-wait-for-lifecycle --lifecycle "open" --network "$DFX_NETWORK" --identity "$DFX_IDENTITY"

# Set the purchased amout to the maximum allowed, if requested.
if [[ "${AMOUNT:-}" = "max" ]]; then
  SWAP_STATE="$(dfx canister call sns_swap get_state '(record {})' --network "$DFX_NETWORK")"
  # Note: max_participant_icp_e8s may be null, so we wish to be careful to get just one integer value, if available.
  #       idl2json + jq may offer a cleaner way of extracting this value but at the time of writing different
  #       candid versions disagree about whether "0" may be parsed as a float, and this breaks parsing with idl2json.
  AMOUNT_E8S="$(awk '/max_participant_icp_e8s/{gsub(/_/,""); if ($3 + 0 == $3) {print $3; exit 0}}' <(printf %s "$SWAP_STATE"))"
  test -n "${AMOUNT_E8S:-}" || {
    echo "ERROR: No max_participant_icp_e8s found for SNS but purchasing the max was requested."
    printf "       Swap state:\n%s\n" "$SWAP_STATE"
    exit 1
  } >&2
else
  AMOUNT_E8S="$((AMOUNT * 100000000))"
fi

set dfx-sns-quill --network "$DFX_NETWORK" new-sale-ticket --amount-icp-e8s "$AMOUNT_E8S"
echo "${@}"
TICKET_RESPONSE="$("${@}" | grep --before-context=1 --after-context=999 '^  record {$')"
TICKET_RESPONSE_JSON="$(echo "$TICKET_RESPONSE" | idl2json)"
TICKET_ID="$(echo "$TICKET_RESPONSE_JSON" | jq -r '.result[0].Ok.ticket[0].ticket_id')"
TICKET_CREATION_TIME="$(echo "$TICKET_RESPONSE_JSON" | jq -r '.result[0].Ok.ticket[0].creation_time')"

if [ "$TICKET_ID" = "null" ]; then
  echo "Didn't get a new ticket ID. Checking the response for an existing ticket ID."
  TICKET_ID="$(echo "$TICKET_RESPONSE_JSON" | jq -r '.result[0].Err.existing_ticket[0].ticket_id')"
  TICKET_CREATION_TIME="$(echo "$TICKET_RESPONSE_JSON" | jq -r '.result[0].Err.existing_ticket[0].creation_time')"
fi

echo "TICKET_ID: $TICKET_ID"

set dfx-sns-quill --network "$DFX_NETWORK" pay --amount-icp-e8s "$AMOUNT_E8S" --ticket-id "$TICKET_ID" --ticket-creation-time "$TICKET_CREATION_TIME"
echo "${@}"
FAILED=false

if ! ("${@}" | tee ,sns-sale-buy.idl); then
  FAILED=true
fi

if grep --quiet 'Panicked' ,sns-sale-buy.idl; then
  FAILED=true
fi

[[ "$FAILED" == "false" ]] || {
  echo "ERROR: Failed to participate in SNS swap."
  echo "Ticket response:"
  echo "$TICKET_RESPONSE"
  echo "Ticket response JSON:"
  echo "$TICKET_RESPONSE_JSON"
  echo "Ticket ID:"
  echo "$TICKET_ID"
  echo "Ticket creation time:"
  echo "$TICKET_CREATION_TIME"
  exit 1
} >&2
