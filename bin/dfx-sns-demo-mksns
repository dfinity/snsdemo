#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
export PATH="$SOURCE_DIR:$PATH:$HOME/.local/bin"

print_help() {
  cat <<-EOF

	Creates a new random SNS proposal and imports the SNS canister IDs into dfx.json.
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
clap.define long=confirmation_text desc="A text that needs to be confirmed by the participants" variable=CONFIRMATION_TEXT default=""
clap.define short=i long=config_index desc="The value for the dfx-sns-config-random --config_index parameter" variable=CONFIG_INDEX default="0"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"
set -x

: Generate the sns.yml file.
dfx-sns-config-random --confirmation_text "${CONFIRMATION_TEXT:-}" --config_index "$CONFIG_INDEX"

: Make sure we have enough resources.
dfx ledger top-up --amount 2.0 --network "$DFX_NETWORK" "$(dfx identity get-wallet --network "$DFX_NETWORK")"
dfx canister deposit-cycles 180000000000000 --network "$DFX_NETWORK" "$(dfx canister id nns-sns-wasm --network "$DFX_NETWORK")"

PROPOSAL_ID_FILE="$(mktemp)"

: Create the 1-proposal.
dfx-sns-propose --network "$DFX_NETWORK" --save-proposal-id-to "$PROPOSAL_ID_FILE"

PROPOSAL_ID="$(jq '.id' "$PROPOSAL_ID_FILE")"
rm "$PROPOSAL_ID_FILE"

: Import the SNS canister IDs for the created proposal.
dfx-sns-import-by-proposal --proposal_id "$PROPOSAL_ID" --network "$DFX_NETWORK"

: Output the imported canister IDs.
dfx canister id sns_root --network "$DFX_NETWORK"
dfx canister id sns_governance --network "$DFX_NETWORK"
dfx canister id sns_ledger --network "$DFX_NETWORK"
dfx canister id sns_index --network "$DFX_NETWORK"
dfx canister id sns_swap --network "$DFX_NETWORK"
