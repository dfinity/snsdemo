#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

print_help() {
  cat <<-EOF

	Deploys a testnet with:
	* Core NNS canisters.
	* Placeholder canisters for ii, nns-dapp and the sns_aggregator.

	Note: This is a minimal abstraction over dfx nns deploy and static testnet deployments
	      that each deploy the core NNS canisters in their own way.
	EOF
}

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
clap.define short=p long=prodlike desc="Make it like prod (experimental)" variable=DFX_PRODLIKE nargs=0
clap.define short=I long=ii_release desc="The release of II to use" variable=DFX_II_RELEASE default=""
clap.define short=c long=commit desc="The IC commit of the wasms" variable=DFX_IC_COMMIT default="$(
  . "$SOURCE_DIR/versions.bash"
  echo "$DFX_IC_COMMIT"
)"
clap.define short=x long=ic_dir desc="Directory containing the ic source code" variable=IC_REPO_DIR default="$HOME/dfn/ic"
clap.define short=y long=nd_dir desc="Directory containing the nns-dapp source code" variable=ND_REPO_DIR default="$HOME/dfn/nns-dapp"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

export DFX_NETWORK
export DFX_IC_COMMIT

: If asked to make the release production-like, get the corresponding software versions
if [[ "${DFX_PRODLIKE:-}" == "true" ]]; then
  DFX_II_RELEASE="$(dfx-software-internet-identity-version --mainnet)"
fi

# Creates core NNS canisters.  Reserves canister IDs for II and nns-dapp.
if [[ "$DFX_NETWORK" == "local" ]]; then
  # Run locally; can be configured by e.g. changing the wasm files in the cache
  dfx-network-stop --network "$DFX_NETWORK"
  export DFX_IC_COMMIT
  WASM_DIR="$(dfx cache show)/wasms"
  test -d "$(dfx cache show)" || dfx cache install
  mkdir -p "$WASM_DIR"
  : "Get the specified version of the nns-sns-wasm.wasm"
  curl "https://download.dfinity.systems/ic/${DFX_IC_COMMIT}/canisters/sns-wasm-canister.wasm.gz" | gunzip >"${WASM_DIR}/sns-wasm-canister.wasm"

  dfx start --clean --background
  DFX_NETWORK="$DFX_NETWORK" dfx-nns-import
  dfx-canister-set-id --canister_name nns-dapp --canister_id qsgjb-riaaa-aaaaa-aaaga-cai
  dfx-canister-set-id --canister_name internet_identity --canister_id qhbym-qaaaa-aaaaa-aaafq-cai

else
  rm -f canister_ids.json
  # Run remotely with one of the predefined configurations.
  # Note: This is still relatively slow and error prone.  Points of friction need to be ironed
  # out before we can resonably ask people to do this.
  IC_REPO_DIR="${IC_REPO_DIR:-$HOME/dfn/ic-github/}"
  ND_REPO_DIR="${ND_REPO_DIR:-$HOME/dfn/nns-dapp/}"
  dfx-network-deploy-testnet --network "$DFX_NETWORK" --ic_dir "${IC_REPO_DIR}" --nd_dir "${ND_REPO_DIR}"
  dfx-network-deploy-config --network "$DFX_NETWORK" --ic_dir "${IC_REPO_DIR}" --nd_dir "${ND_REPO_DIR}"

  # Placeholders for frontend canister IDs
  DFX_NETWORK="$DFX_NETWORK" dfx-nns-import
  jq '.canisters.sns_aggregator = { type: "custom", candid: "placeholder", wasm: "placeholder", build: "true" }' dfx.json | sponge dfx.json
  jq '.canisters.internet_identity = { type: "custom", candid: "placeholder", wasm: "placeholder", build: "true" }' dfx.json | sponge dfx.json
  jq '.canisters["nns-dapp"] = { type: "custom", candid: "placeholder", wasm: "placeholder", build: "true" }' dfx.json | sponge dfx.json
  dfx canister create internet_identity --no-wallet --network "$DFX_NETWORK" --provisional-create-canister-effective-canister-id qhbym-qaaaa-aaaaa-aaafq-cai
  dfx canister create nns-dapp --no-wallet --network "$DFX_NETWORK" --provisional-create-canister-effective-canister-id qsgjb-riaaa-aaaaa-aaaga-cai
  dfx canister create sns_aggregator --no-wallet --network "$DFX_NETWORK"
fi

: Set up ckbtc canisters
dfx-ckbtc-import --prefix ckbtc_
dfx-ckbtc-deploy --prefix ckbtc_ --network "$DFX_NETWORK" --yes

: Install Internet Identity, NNS and aggregator
dfx-network-deploy-frontends --network "$DFX_NETWORK" --nd_dir "${ND_REPO_DIR}"

: Add the nns root as a controller to the frontend canisters
NNS_ROOT="$(dfx canister id nns-root --network "$DFX_NETWORK")"
for canister in nns-dapp internet_identity; do
  dfx canister --network "$DFX_NETWORK" update-settings "$canister" --add-controller "$NNS_ROOT"
done

: "Check that all the expected canisters have known canister IDs and are listed in dfx.json."
for canister in ckbtc_ledger ckbtc_minter ckbtc_index internet_identity nns-dapp sns_aggregator; do
  echo "Check $canister:"
  c="$canister" jq -e '.canisters[env.c]' dfx.json
  dfx canister id "$canister" --network "$DFX_NETWORK"
done
