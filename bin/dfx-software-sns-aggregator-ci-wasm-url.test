#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

for flavour in prod dev; do
  (
    echo "The $flavour sns_aggregator URL should be valid."
    URL="$(dfx-software-sns-aggregator-ci-wasm-url --flavor "$flavour")"
    [[ "${URL:-}" =~ ^https: ]] || {
      echo "ERROR: The $flavour sns_aggregator download should be a valid URL: '$URL'"
      exit 1
    } >&2
    case "$flavour" in
    dev)
      [[ "${URL}" =~ sns_aggregator_dev.wasm.gz$ ]] || {
        echo "ERROR: The dev URL should end with sns_aggregator_dev.wasm.gz: $URL"
        exit 1
      } >&2
      ;;
    prod)
      [[ "${URL}" =~ sns_aggregator.wasm.gz$ ]] || {
        echo "ERROR: The dev URL should end with sns_aggregator.wasm.gz: $URL"
        exit 1
      } >&2
      ;;
    *)
      {
        echo "ERROR: Unrecognized flavour: ${flavour:-}"
        exit 1
      } >&2
      ;;
    esac
    DOWNLOAD="$(mktemp "sns_aggregator_${flavour}.XXXX" --suffix=".wasm.gz")"
    curl --no-progress-meter --retry 5 --fail -L "$URL" >"$DOWNLOAD"
    curl_exit_code="$?"
    ((curl_exit_code == 0)) || {
      echo "ERROR: Curl failed with exit code $curl_exit_code but the test failed to stop."
      exit 1
    }
    test -e "$DOWNLOAD" || {
      echo "ERROR: The downloaded file is missing."
      echo "       If curl returned zero this should not happen."
      exit 1
    }
    dfx-canister-nm "$DOWNLOAD" >"${DOWNLOAD%.gz}.symbols"
    grep -q canister_query "${DOWNLOAD%.gz}.symbols" || {
      echo "ERROR: The downloaded file should be a canister wasm file but doesn't appear to be."
      echo "       It should be:"
      echo "       - A wasm file"
      echo "       - With canister query calls"
      echo "       - Optionally gzipped"
      echo "Download file type:"
      file "$DOWNLOAD"
      echo "File stats:"
      ls -l "$DOWNLOAD"
      echo "Symbols:"
      cat "${DOWNLOAD%.gz}.symbols"
      exit 1
    } >&2
    rm "$DOWNLOAD"
  )
done

(
  echo "The default flavour should be prod."
  DEFAULT_URL="$(dfx-software-sns-aggregator-ci-wasm-url)"
  PROD_URL="$(dfx-software-sns-aggregator-ci-wasm-url --flavor prod)"
  [[ "${DEFAULT_URL:-}" == "${PROD_URL}" ]] || {
    echo "ERROR: The default URL should be the production URL."
    echo "  DEFAULT:    '${DEFAULT_URL}'"
    echo "  PRODUCTION: '${PROD_URL}'"
    exit 1
  } >&2
)

echo "$(basename "$0") PASSED"
