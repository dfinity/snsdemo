
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

# Source the optparse.bash file ---------------------------------------------------
source "$SOURCE_DIR/optparse.bash"
# Define options
optparse.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
# Source the output file ----------------------------------------------------------
source "$(optparse.build)"
set -euo pipefail
cd "$(dirname "$(realpath "$0")")/.."

bin/demo-cleanup
export DFX_NETWORK

dfx start --clean --background
sleep 1

dfx-network-deploy --network "$DFX_NETWORK"

dfx nns import --network-mapping "$DFX_NETWORK=mainnet"
# jq '.*(.canisters | to_entries | map(select(.key | startswith("nns-")) | .value.remote.id[env.DFX_NETWORK] = .value.remote.id.local) |from_entries | {canisters:.})' dfx.json | sponge dfx.json
dfx sns import

rm -fr "$HOME/.config/dfx/identity/snsdemo8"
dfx identity new --disable-encryption snsdemo8
dfx identity use snsdemo8

bin/dfx-ledger-get-icp --icp 900000000 --network "$DFX_NETWORK"
bin/dfx-neuron-create --icp 500000000 --network "$DFX_NETWORK"
bin/dfx-neuron-prolong --network "$DFX_NETWORK"

./bin/dfx-sns-whitelist-me --network "$DFX_NETWORK"
bin/dfx-sns-subnet-add --network "$DFX_NETWORK"

./bin/dfx-sns-config-random --network "$DFX_NETWORK"
./bin/dfx-sns-deploy --network "$DFX_NETWORK"

dfx canister id sns_root --network "$DFX_NETWORK"
dfx canister id sns_governance --network "$DFX_NETWORK"
dfx canister id sns_ledger --network "$DFX_NETWORK"
dfx canister id sns_swap --network "$DFX_NETWORK"

: "Demo finished!  Hope you enjoyed the show."
