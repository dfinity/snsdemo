#!/usr/bin/env bash
set -euo pipefail
. .demo-env

test -f canister_ids.json || echo '{}' >canister_ids.json

: "$DFX_NETWORK"
: "$ND_REPO_DIR"

echo "Checking that we have network config"
jq -e '.networks[env.DFX_NETWORK]' dfx.json || {
  jq -s '.[0] * .[1]' dfx.json <(
    cd "$ND_REPO_DIR"
    jq '{networks: .networks}' dfx.json
  ) >dfx.json.new && mv dfx.json.new dfx.json
}

: "Why is this needed???"
: "Ah, it's an out-of-control webpack plugin.  These can probably be deleted now."
#export SNS_LEDGER_CANISTER_ID=111
#export SNS_GOVERNANCE_CANISTER_ID=111
#export SNS_ROOT_CANISTER_ID=111
#export SNS_SWAP_CANISTER_ID=111

echo "Deploying dapp"
npm ci
dfx deploy --network "$DFX_NETWORK" --with-cycles 1000000000000 smiley_dapp
dfx deploy --network "$DFX_NETWORK" --with-cycles 1000000000000 smiley_dapp_assets

echo "Getting dapp info..."
export DAPP_NAME=smiley_dapp_assets
export DAPP_FRONTEND="$(dfx canister --network "$DFX_NETWORK" id smiley_dapp_assets)"
export DAPP_BACKEND="$(dfx canister --network "$DFX_NETWORK" id smiley_dapp)"
echo "See: $(jq -r '.networks[env.DFX_NETWORK].config.HOST' dfx.json | awk -F '://' -v canister_id="$DAPP_FRONTEND" '{print $1 FS canister_id "." $2}')"
read -rp "Press enter to continue... "
export DAPP_FRONTEND
export DAPP_BACKEND

echo "Querying the canister:"
set dfx canister --network "$DFX_NETWORK" call smiley_dapp getBackgroundColor '()'
echo "  ${*}"
"${@}"
read -rp "Press enter to continue... "
