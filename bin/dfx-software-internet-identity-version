#!/usr/bin/env bash
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"
. "$SOURCE_DIR/versions.bash"

export DFX_NETWORK=""

# Source the optparse.bash file ---------------------------------------------------
source "$SOURCE_DIR/optparse.bash"
# Define options
optparse.define short=l long=latest desc="Get the latest version" variable=GET_LATEST nargs=0
optparse.define short=n long=network desc="Get the version deployed on the given network" variable=DFX_NETWORK default=""
optparse.define short=c long=canister desc="Get the version deployed to the given canster of the specified network" variable=CANISTER
optparse.define short=m long=mainnet desc="Get the version deployed in production" variable=GET_MAINNET
optparse.define short=h long=hash desc="Get the version of a given hash" variable=GET_HASH
# Source the output file ----------------------------------------------------------
source "$(optparse.build)"
set -euo pipefail

: "If a canister is specified, verify that a network is specified as well"
test -z "${CANISTER:-}" || {
  DFX_NETWORK="${DFX_NETWORK:-local}"
}
: "If a network is specified, make sure that a canister ID is set as well."
test -z "${DFX_NETWORK:-}" || {
  if [[ "$DFX_NETWORK" == "local" ]]; then
    CANISTER="${CANISTER:-qhbym-qaaaa-aaaaa-aaafq-cai}"
  else
    CANISTER="${CANISTER:-qhbym-qaaaa-aaaaa-aaafq-cai}"
  fi
}

STRATEGY="${STRATEGY:-${GET_LATEST:+latest}}"
STRATEGY="${STRATEGY:-${GET_URL:+url}}"
STRATEGY="${STRATEGY:-${GET_MAINNET:+mainnet}}"
STRATEGY="${STRATEGY:-${GET_HASH:+hash}}"
STRATEGY="${STRATEGY:-${DFX_NETWORK:+network}}"
case "${STRATEGY}" in
latest)
  gh release list --exclude-drafts --limit 1 --repo dfinity/internet-identity | awk '{print $1}' | awk -F: '{print $1}'
  ;;
mainnet)
  dfx-software-internet-identity-version --network ic --canister rdmx6-jaaaa-aaaaa-aaadq-cai
  ;;
network)
  HASH="$(dfx canister info --network "$DFX_NETWORK" "$CANISTER" | awk -F: '/Module hash/{print $2}' | tr -d '[:space:]')"
  dfx-software-internet-identity-version --hash "$HASH"
  ;;
hash)
  HASH="$(echo "$GET_HASH" | tr '[:upper:]' '[:lower:]')"
  HASH="${HASH#0x}"
  gh release list --repo dfinity/internet-identity |
    awk '{print $1}' | awk -F: '{print $1}' |
    while read -r line; do
      if gh release view "$line" --repo dfinity/internet-identity |
        grep "${HASH}" |
        sed -En 's,.*(https://github.com/dfinity/internet-identity/releases/download/release-[-0-9a-zA-Z]+/internet_identity[_a-zA-Z0-9]*.wasm).*,\1,g;ta;b;:a;p;q' |
        grep . >&2; then
        echo "$line"
        break
      fi
    done
  ;;
"")
  # Best guess. NOT guaranteed to be stable.
  guess="${1:-latest}"
  case "${guess:-}" in
  latest) dfx-software-internet-identity-version --latest ;;
  mainnet) dfx-software-internet-identity-version --mainnet ;;
  release-*) echo "${guess}" ;;
  *) dfx-software-internet-identity-version --hash "${guess}" ;;
  esac
  ;;
*)
  {
    echo "ERROR: Unsupported strategy '${STRATEGY:-}'"
    exit 1
  } >&2
  ;;
esac
