#!/usr/bin/env bash
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# Source the optparse.bash file ---------------------------------------------------
source "$SOURCE_DIR/optparse.bash"
# Define options
optparse.define short=s long=icp desc="The amount of ICP to icp" variable=ICP default=1
optparse.define short=i long=DFX_IDENTITY desc="The dfx identity to use" variable=DFX_IDENTITY default="$(dfx identity whoami)"
optparse.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
optparse.define short=V long=verbose desc="Print progress" variable=DFX_VERBOSE nargs=0
# Source the output file ----------------------------------------------------------
source "$(optparse.build)"
set -euo pipefail
test -z "${DFX_VERBOSE:-}" || set -x

# Create a neuron
PEM="$HOME/.config/dfx/identity/$DFX_IDENTITY/identity.pem"
test -e "$PEM" || {
  echo "ERROR: Pem file for user '$DFX_IDENTITY' does not exist at '$PEM'"
  exit 1
} >&2
NEURONS_DIR="$HOME/.config/dfx/identity/$DFX_IDENTITY/neurons"
mkdir -p "$NEURONS_DIR"
NEURONS_FILE="$NEURONS_DIR/$DFX_NETWORK"
export IC_URL="$("$SOURCE_DIR/dfx-network-url" --network "$DFX_NETWORK")"
# Note: Quill send puts a pile of junk on stdout and has no option to put just the response(s) somewhere safe such as a file.

set quill neuron-stake --insecure-local-dev-mode --pem-file "$PEM" --amount "$ICP" --name 1
MESSAGE="$("${@}")"
test -n "${MESSAGE:-}" || {
  echo "ERROR: Created an empty message."
  command -v quill
  echo "${@}"
  exit 1
} >&2
set quill send --yes --insecure-local-dev-mode -
RESPONSE="$(echo "$MESSAGE" | "${@}")"
test -n "${RESPONSE:-}" || {
  echo "ERROR: Received an empty response."
  echo message:
  echo "$MESSAGE"
  echo
  echo command -v quill
  echo "${@}"
  exit 1
} >&2
NEURON_TEXT="$(echo "$RESPONSE" | perl -e 'while($_ = <>){if (s/NeuronId = record \{ id = ([0-9_]+) : nat64 \}/\1/){ print $_ }}')"
test -n "${NEURON_TEXT:-}" || {
  echo "ERROR: Could not find neuron in response:"
  echo "$RESPONSE"
  exit 1
} >&2
NEURON_ID="$(echo "$NEURON_TEXT" | tr -cd '[:alnum:]')"
test -n "${NEURON_ID:-}" || {
  echo "Failed to get nuron ID from line: $NEURON_TEXT"
  exit 1
} >&2

echo "$NEURON_ID" >>"$NEURONS_FILE"
echo
tail -n1 "$NEURONS_FILE"
