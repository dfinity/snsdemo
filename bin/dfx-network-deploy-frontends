#!/usr/bin/env bash
set -euo pipefail
SOURCE_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
PATH="$SOURCE_DIR:$PATH"

# Source the clap.bash file ---------------------------------------------------
source "$SOURCE_DIR/clap.bash"
# Define options
clap.define short=n long=network desc="The dfx network to use" variable=DFX_NETWORK default="local"
clap.define short=c long=commit desc="The IC commit of the wasms" variable=DFX_IC_COMMIT default="$(
  . "$SOURCE_DIR/versions.bash"
  echo "$DFX_IC_COMMIT"
)"
clap.define short=y long=nd_dir desc="Directory containing the nns-dapp source code" variable=ND_REPO_DIR default="$HOME/dfn/nns-dapp"
# Source the output file ----------------------------------------------------------
source "$(clap.build)"

export DFX_NETWORK

if [[ "$DFX_NETWORK" == "local" ]]; then
  echo NOT APPLICABLE
else
  # Run remotely with one of the predefined configurations.
  # Note: This is still relatively slow and error prone.  Points of friction need to be ironed
  # out before we can resonably ask people to do this.
  ND_REPO_DIR="${ND_REPO_DIR:-$HOME/dfn/nns-dapp/}"
  test -d "$ND_REPO_DIR" || {
    echo "Invalid directory for nns-dapp source code: $ND_REPO_DIR"
    exit 1
  } >&2

  (
    set -euxo pipefail
    echo "Deploying internet-identity and nns-dapp"
    cp canister_ids.json "$ND_REPO_DIR"
    pushd "$ND_REPO_DIR"
    ./deploy.sh --ii "$DFX_NETWORK"
    ./deploy.sh --sns-aggregator "$DFX_NETWORK"
    ./deploy.sh --nns-dapp "$DFX_NETWORK"
    popd
    cp "$ND_REPO_DIR/canister_ids.json" canister_ids.json
  ) || say fail fail fail

  jq '.canisters.sns_aggregator = { type: "custom", candid: "placeholder", wasm: "placeholder", build: "true" }' dfx.json | sponge dfx.json
  jq '.canisters.internet_identity = { type: "custom", candid: "placeholder", wasm: "placeholder", build: "true" }' dfx.json | sponge dfx.json
  jq '.canisters["nns-dapp"] = { type: "custom", candid: "placeholder", wasm: "placeholder", build: "true" }' dfx.json | sponge dfx.json
fi
